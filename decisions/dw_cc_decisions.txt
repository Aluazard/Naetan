## This file contains all decisions and targetted_decisions for the game
## Yes, targeted MUST be spelled wrong, as targeted_decisions isn't recognized by the game, yet targetted_decisions is.

# Decisions
# ROOT is the decision taker
decisions = {
	# Player decision to abdicate their throne to their heir.
	dw_resign_title = {
		potential = {
			ai = no
			current_heir = {
				dynasty = ROOT
			}
		}
		allow = {
			age = 40
			prisoner = no
			has_regent = no
			NOT = { trait = lunatic }
			NOT = { trait = possessed }
			current_heir = {
				has_regent = no
				NOT = { trait = incapable }
				age = 16
				NOT = { age = 40 }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }
				prisoner = no
			}
		}
		effect = {
			abdicate = yes
		}
		ai_will_do = {
			factor = 0 # Zero chance the ai uses this
		}
	}
	# Player decision to seek out a Court Jester
	dw_hire_jester = {
		potential = {
			ai = no
			NOT = { has_character_flag = dw_jester_shopping }
			OR = {
				is_feudal = yes
				is_tribal = yes
			}
			primary_title = {
				OR = {
					tier = king
					tier = emperor
				}
			}
		}
		allow = {
			prisoner = no
			has_regent = no
			NOT = {
				any_courtier = {
					has_minor_title = title_court_jester
				}
			}
		}
		effect = {
			set_character_flag = dw_jester_shopping
			narrative_event = { id = DWCourt.1000 }
		}
		ai_will_do = {
			factor = 0 # Zero chance the ai uses this
		}
	}
	# Alchemist / Emporium Shopping
	dw_go_shopping = { # Inspired by the old nadamod's visit_shop decision and events
		ai_check_interval = 36 # To keep things from getting out of hand, we only want the ai to go shopping once every three years
		potential = {
			OR = {
				has_valid_alchemist = yes
				has_valid_emporium = yes
			}
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
			wealth = 10
		}
		effect = {
			narrative_event = { id = DWCourt.100 }
		}
		ai_will_do = {
			factor = 0.5 # 50% likely to go shopping during their one annual check
			modifier = { # Half as likely to go
				factor = 0.5 
				OR = {
					trait = timid # Doesn't like the crowds - just in case I open up shopping for kids, I'm putting this in here now
					trait = content # Happy with what they already have, not really looking for anything new
					trait = shy # Doesn't like the crowds
					trait = paranoid # Doesn't fully trust the wares that are being sold
				}
			}
		}
	}
	#Visit Wizard's Tower
	dw_visit_wizard_tower = {
		ai_check_interval = 12
		potential = {
			capital_scope = {
				OR = {
					has_building = dw_wizard_tower_1
					has_building = dw_wizard_tower_2
					has_building = dw_wizard_tower_3
				}
			}
			is_ruler = yes # We only want rulers visiting the Wizard's Tower. No need for mere peasantry or minor nobles to wander where they're unwelcome.
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
		}
		effect = {
			narrative_event = { id = DWCourt.5000 }
		}
		ai_will_do = {
			factor = 0.1 # 10% base chance
			modifier = { # Since magic is generally seen as taboo by many religions, someone who is very religious will not visit such a place themselves
				factor = 0
				ai_zeal = 50
			}
		}
	}
	#Visit the brothel
	dw_visit_brothel = {
		ai_check_interval = 6
		potential = {
			has_valid_brothel = yes
			is_adult = yes
		}
		allow = {
			NOT = { 
				trait = incapable
			}
			prisoner = no
			wealth = 5
		}
		effect = {
			character_event = { id = DWWhoring.1 }
		}
		ai_will_do = {
			factor = 0.1 # AI is a base 10% likely to visit a brothel
			modifier = { # Certain traits prohibit such activity
				factor = 0
				NOR = { 
					trait = chaste # conflicts with belief
					trait = celibate # conflicts with belief
					trait = monk # conflicts with belief
					trait = nun # conflicts with belief
					trait = angel # conflicts with belief
					trait = zealous # conflicts with belief
					trait = depressed # heart not in it
					trait = victim # heart not in it
					trait = syphilitic # too sickly
					trait = has_tuberculosis # too sickly
					trait = has_typhoid_fever # too sickly
					trait = has_typhus # too sickly
					trait = has_bubonic_plague # too sickly
					trait = has_measles # too sickly
					trait = has_small_pox # too sickly
					trait = pneumonic # too sickly
					trait = leper # too sickly
					trait = infirm # too injured
					trait = eunuch # unable
					trait = frog # unable
					trait = pregnant # one bun in the oven is enough
					trait = branded_slave # A slave doesn't have the freedom to visit the whorehouse of their own desire
					trait = wounded #Need time to heal
					trait = maimed #Need time to heal
					is_consort = yes # A ruler typically doesn't like his concubines going out and seeking external lovers
				}
			}
			modifier = { # The extremely religious won't seek resolution in a brothel
				factor = 0
				ai_zeal = 25
			}
			modifier = { # Those who are tolerant or don't hold to higher powers are twice more likely to use a brothel
				factor = 2
				NOT = { ai_zeal = -19 } # Less than -19 should make it -20 or below
			}
			modifier = { # Those of honor are half as likely to visit
				factor = 0.5
				ai_honor = 20
			}
			modifier = { # Those of high rationality are a quarter as likely to visit, due to the benefits being minor compared to the benefits
				factor = 0.25
				ai_rationality = 20
			}
			modifier = { # Those of low rationality are three times as likely to visit, due to a failure to consider the consequences
				factor = 3
				NOT = { ai_rationality = -19 } # Less than -19 should make it -20 or below
			}
			modifier = { # Those who are content are half as likely to visit
				factor = 0.5
				NOT = { ai_ambition = -19 } # Less than -19 should make it -20 or below
			}
		}
	}
	# Work in the brothel
	dw_work_whore = {
		ai_check_interval = 6
		potential = {
			is_adult = yes
			NOT = { trait = retired_whore } # A retired whore shouldn't even see the option.
			any_realm_province = {
				OR = {
					has_building = dw_brothel_1 # Castle
					has_building = dw_redlight_district_1 # City
					has_building = dw_morale_wagon_1 # Nomad
					has_building = dw_whore_pen_1 # Tribal
				}
			}			
		}
		allow = {
			is_adult = yes
			prisoner = no
			NOR = { 
				trait = incapable 
				trait = chaste
				trait = celibate
			}
			custom_tooltip = { # We want to limit how often someone can whore themselves, mainly to not create a cash making exploit
				text = dw_whore_recovery
				NOT = { has_character_flag = dw_whore_recovery }
			}
		}
		effect = {
			hidden_tooltip = {
				if = { #leveling up
					limit = {
						trait = experienced_whore
						}
					random = {
						chance = 5 # 5%						
						add_trait = exclusive_whore
						remove_trait = experienced_whore
						modifier = {
							factor = 3 # makes it 15%
							intrigue = 10 # Someone with a high intrigue is better at reading subtle changes that helps them please their customer much more
						}
					}
				}
				if = {
					limit = {
						trait = cheap_whore
						}
					random = {
						chance = 10 # 10%
						add_trait = experienced_whore
						remove_trait = cheap_whore
						modifier = {
							factor = 3 # makes it 30%
							intrigue = 10 # Someone with a high intrigue is better at reading subtle changes that helps them please their customer much more
						}
					}
				}
				if = { # If someone has no previous whore trait, it establishes one for them.
					limit = {
						NOT = {
							trait = cheap_whore
							trait = experienced_whore
							trait = exclusive_whore
						}
					}
					add_trait = cheap_whore
				}				
				set_character_flag = dw_whore_recovery
				character_event = { id = DWWhoring.999 days = 30 } #clear flag after a month
			}
			character_event = { id = DWWhoring.500 }
		}
		ai_will_do = {
			factor = 0.05 # 1 out of 20, 5% of folks are likely to do some whoring, before modifiers
			modifier = { # Some traits and conditions lead to avoiding working as a whore
				factor = 0
				OR = {
					trait = chaste # conflicts with belief
					trait = celibate # conflicts with belief
					trait = monk # conflicts with belief
					trait = nun # conflicts with belief
					trait = angel # conflicts with belief
					trait = zealous # conflicts with belief
					trait = depressed # heart not in it
					trait = victim # heart not in it
					trait = shy # too embarrassed
					trait = syphilitic # too sickly
					trait = has_tuberculosis # too sickly
					trait = has_typhoid_fever # too sickly
					trait = has_typhus # too sickly
					trait = has_bubonic_plague # too sickly
					trait = has_measles # too sickly
					trait = has_small_pox # too sickly
					trait = pneumonic # too sickly
					trait = leper # too sickly
					trait = infirm # too injured
					trait = incapable # unable
					trait = eunuch # unable
					trait = frog # unable
					trait = genius # risks outweigh rewards
					trait = quick # risks outweigh rewards
					trait = shrewd # risks outweigh rewards
					trait = scholar # risks outweigh rewards
					trait = theologian # risks outweigh rewards
					trait = pregnant # one bun in the oven is enough
					trait = branded_slave # This block is to prevent a slave from obtaining the whore trait without having been specifically selected by the player, they'll still earn money and be pulled into service by the random check for brothel vistors and earn money there
					trait = wounded #Need time to heal
					trait = maimed #Need time to heal
					is_married = yes # Getting hitched keeps someone from working, in order to avoid headaches
					is_consort = yes # A ruler typically doesn't like his concubines going out and seeking external lovers
					AND = {
						age = 50
						NOT = { trait = immortal } # There is a limit to the number of wrinkles allowed to whore themselves out
					}
				}
			}
			modifier = {
				factor = 0
				ai_honor = 20 # Strong morale code prevents working
			}
			modifier = {
				factor = 5
				ai_greed = 20 # Those who desire money see this as an easy method to gain it
			}
			modifier = {
				factor = 0
				ai_rationality = 20 # These people have weighed the risks and decided that it's not worth it
			}
			modifier = {
				factor = 2
				NOT = { ai_rationality = -19 } # -19 means -20 or below should trigger
			}
			modifier = {
				factor = 0
				ai_zeal = 25 # The Spiritually devout will not partake of such an activity
			}
			modifier = {
				factor = 2
				NOT = { ai_zeal = -19 } # -19 means -20 or below should trigger
			}
			modifier = { # Some traits that make it difficult to get customers, and thus hard to work
				factor = 0.5
				OR = {
					trait = clubfooted
					trait = harelip
					trait = ugly
				}
			}
		}
	}
	# Visit the stables
	dw_visit_stable = {
		potential = {
			ai = no # Player only decision
			has_global_flag = dw_stable_morale_visits # Has to be turned on via the random Marshall idea on_action event
			has_valid_stable = yes
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
		}
		effect = {
			narrative_event = { id = DWCourt.3110 }
		}
		ai_will_do = {
			factor = 0 # ai should not be doing this
		}
	}
	#Visit the Arena
	dw_visit_arena = {
		ai_check_interval = 6
		potential = {
			has_valid_arena = yes # Custom Script Trigger
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
		}
		effect = {
			narrative_event = { id = DWCourt.7000 }
		}
		ai_will_do = {
			factor = 0.1 # 10% base chance
			modifier = { # The very spiritual avoid the games in general, as they see it more as unnecessary pain and suffering.
				factor = 0
				ai_zeal = 50
			}
			modifier = { # The greedy are drawn to the arena, and the potential to win money
				factor = 5
				ai_greed = 50
			}
		}
	}
}
# Targetted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	rivals: your rivals plus any character you have an opinion modifier with 'crime = yes' set (the same set of characters the 'is_foe' trigger evaluates)
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#	
targetted_decisions = {
	#Motivate Chancellor in their fabrication of claims
	dw_motivate_chancellor_claim = {
		filter = court
		ai_target_filter = self #We don't want the ai actually doing this, but we're reducing CPU impact just in case
		from_potential = {
			ai = no			
		}
		potential = {
			has_job_title = job_chancellor # Ensure we select our Chancellor
			has_job_action = action_fabricate_claims # We should only be motivating them for the relevant task.
			liege = {
				ai = no #We make certain we can only motivate our own.
			}
		}
		allow = {
			always = yes
		}
		effect = {
			FROM = { character_event = { id = DWCourt.3000 } } # Event triggers for the liege
		}
		ai_will_do = {
			factor = 0
		}
	}
	#Enslave a prisoner
	dw_enslave_prisoner = {
		filter = court
		ai_target_filter = court
		ai_check_interval = 3
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			ai = yes # We're not going to enslave the player, as we're not detailing any of the slave side events
			prisoner = yes
			NOT = { has_character_modifier = dw_slave_training } # A slave who is already being trained is already a slave.
			NOT = { trait = branded_slave }
			host = {
				character = FROM
			}
		}
		allow = {
			age = 6 # Kids can be trained, although only in non-sexual jobs
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.1 days = 1 } # Target notified
			add_character_modifier = { name = dw_slave_training duration = -1 } # Character slotted for slave training
		}
		ai_will_do = {
			factor = 0.10 # 10% base chance
			modifier = {
				factor = 0
				FROM = {
					ai_honor = 20 #Honorable ai will opt not to enslave someone.
				}
			}
			modifier = {
				factor = 0
				FROM = {
					ai_zeal = 50 # Highly spiritual ai will opt not to enslave someone.
				}
			}
			modifier = {
				factor = 3 # makes it 30%
				FROM = {
					ai_greed = 20 # Greedy ai will be more likely to enslave someone.
				}
			}
		}
	}
	#Select an additional training category
	dw_select_slave_training = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			ai = yes
			prisoner = yes
			has_character_modifier = dw_slave_training
			NOT = { has_character_flag = dw_slave_training_in_progress }
			host = {
				character = FROM
			}
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.10 }
		}
		ai_will_do = {
			factor = 1 # If the ai has a slave that can be trained further, we want to go ahead and just do it.
		}
	}
	#Brand a slave
	dw_brand_slave = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			prisoner = yes
			host = {
				character = FROM
			}
			NOT = { trait = branded_slave }
			OR = {
				has_character_modifier = dw_slave_pleasure_complete
				has_character_modifier = dw_slave_warrior_complete
				has_character_modifier = dw_slave_skilled_complete
				has_character_modifier = dw_slave_common_complete
			}				
		}
		effect = {
			character_event = { id = DWSlavery.700 }
		}
		ai_will_do = {
			factor = 1 # We don't want the ai collecting slaves, so they'll brand them when eligible.
		}
	}
	#Sell a slave
	dw_sell_slave = {
		filter = court
		ai_target_filter = court
		ai_check_interval = 6
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			host = {
				character = FROM
			}
			trait = branded_slave
			slave_sale_health_check = yes
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.800 }
		}
		ai_will_do = {
			factor = 0.1 # 10% likely to sell a slave they have
			modifier = {
				factor = 0
				OR = {
					ai_honor = 20 #If they're very honorable, they more likely bought the slave to free than utilize.
					NOT = { ai_greed = -9 } #If they're not greedy, then they don't see a financial need to part with the slave
				}
			}
		}
	}
	#Keep a slave
	dw_keep_slave = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			capital_scope = {
				OR = {
					has_building = dw_slave_dungeon_1 # Castle
					has_building = dw_slave_dungeon_2
					has_building = dw_slave_dungeon_3
					has_building = dw_slave_wagon_1 # Nomad
					has_building = dw_slave_wagon_2
					has_building = dw_slave_wagon_3
					has_building = dw_slave_wagon_4
					has_building = dw_slave_wagon_5
					has_building = dw_slave_pen_1 # Tribal
					has_building = dw_slave_pen_2
					has_building = dw_slave_pen_3
				}
			}			
		}
		potential = {
			prisoner = yes
			host = {
				character = FROM
			}
			trait = branded_slave
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.900 }
		}
		ai_will_do = {
			factor = 0.2 # 20% base chance
		}
	}
	# Collect payment from working pleasure whore
	dw_collect_slave_whore_payment = {
		filter = court
		ai_target_filter = court
		from_potential = {
			is_ruler = yes # We don't need courtier's collecting from our whores
			prisoner = no # Can't collect from behind bars
			NOT = { trait = in_hiding } # If we're staying low, we don't interact with our whore slaves
		}
		potential = {
			liege = {
				character = FROM # ensure that a ruler is only pulling from their whore slaves
			}
			trait = branded_slave # We ensure that it's a slave we're collecting from
			OR = { # We ensure they've one of the whoring traits
				trait = cheap_whore
				trait = experienced_whore
				trait = exclusive_whore
			}
		}
		effect = {
			transfer_scaled_wealth = {
				to = FROM # We're taking from the target and giving to the ruler
				value = all # Our whore slaves have no need of cash, so we're taking it all, hopefully.
			}
		}
	}
	#Support visit with Sorcey
	dw_visit_mage_sorcey = {
		filter = home_court 
		ai_target_filter = self # Doesn't really apply as the ai should not be using this
		from_potential = { # From is the person targeting the person to evoke the decision
			is_ruler = yes # Based on the Wizard's Order doctrine, only rulers can obtain services from their mages
			prisoner = no # Hard to visit while in a jail cell
		}
		potential = { # This is where we check the target to ensure they're valid
			has_character_flag = dw_npc_sorcey
			liege = {
				character = FROM # We ensure that her liege is the only ruler calling upon Sorcey
			}
		}
		allow = {
			prisoner = no # The target shouldn't be in prison
			NOT = { trait = in_hiding } # The target shouldn't be in hiding
			in_command = no # The target shouldn't be off leading troops somewhere
		}
		effect = {
			# Our initial check event for further routing
			FROM = { narrative_event = { id = DWCourt.5100 }}
		}
		ai_will_do = {
			factor = 0.05 # 5% chance the ai enlists Sorcey's services if eligible
		}
	}
	#Turn target into a frog
	dw_spell_frog = {
		filter = all
		ai_target_filter = rivals # Hopefully to keep the ai from scoping and hitting a friendly
		from_potential = { # From is the person targeting the person to evoke the decision
			has_character_modifier = dw_spell_frog_target
		}
		potential = { # This is where we check the target to ensure they're valid
			NOT = { character = FROM } # We don't want to target ourselves by accident
			is_within_diplo_range = FROM # The target should be within the diplomatic range of the 'caster' for targeting purposes
		}
		allow = {
			NOT = { trait = in_hiding } # The target shouldn't be in hiding
		}
		effect = {
			# We remove the character modifier so it cannot be reused without cost
			FROM = { remove_character_modifier = dw_spell_frog_target }
			# We apply the curse effect
			add_trait = frog
			add_trait = portrait7
		}
		ai_will_do = {
			factor = 0.05 # 5% chance the ai chooses to do this if they ever have that chance
		}
	}
	#Stop Whoring
	dw_target_stop_whoring = {
		filter = home_court 
		ai_target_filter = home_court
		from_potential = { # From is the person targeting the person to evoke the decision
			
		}
		potential = { # This is where we check the target to ensure they're valid
			NOT = { character = FROM } # We don't want to target ourselves by accident
			liege = { character = FROM } # Only a liege should be able to direct their folks to give it up.
			OR = { # they need to have one of the whoring traits
				trait = cheap_whore
				trait = experienced_whore
				trait = exclusive_whore
			}
		}
		allow = {
			NOT = { trait = in_hiding } # The target shouldn't be in hiding
			NOR = { # There are some traits that we're going to say are just too into the lifestyle so they'll not even invite the conversation
				trait = hedonist
				trait = lustful
				trait = stubborn
			}
		}
		effect = {			
			# Event for routing
			FROM = { character_event = { id = DWWhoring.1000 }}
		}
		ai_will_do = {
			factor = 0.01 # 1% chance the ai chooses to do this if they ever have that chance
		}
	}
	# Attempt a kidnapping
	dw_kidnap = {
		filter = all
		ai_target_filter = realm
		from_potential = {
			ai = no # Player only
		}
		potential = {
			is_within_diplo_range = FROM # The target should be within reasonable travel range for the attempted abduction
			FROM = {
				wealth = 50
				any_courtier = {
					has_job_title = job_spymaster # We ensure that the player has a spymaster to execute the work
				}
			}
		}
		allow = {
			always = yes # For our testing purposes
		}
		effect = {
			FROM = { narrative_event = { id = DWCourt.3800 }}
		}
		ai_will_do = {
			factor = 0 # Not wanting the ai to do this at this time
		}
	}
	#Hermione Purity Magic (removes lust/hedonist, chance to add chaste or celibate)
	dw_hermione_purity_spell = {
		filter = all
		ai_target_filter = rivals # Hopefully to keep the ai from scoping and hitting a friendly
		from_potential = { # From is the person targeting the person to evoke the decision
			piety = 25
			any_courtier = { # We ensure that we've Hermione in the court, and that she has enough piety to cast the spell
				has_character_flag = dw_npc_hermione
			}
		}
		potential = { # This is where we check the target to ensure they're valid
			NOT = { character = FROM } # We don't want to target ourselves by accident
			is_within_diplo_range = FROM # The target should be within the diplomatic range of the 'caster' for targeting purposes
		}
		allow = {
			NOR = {
				trait = in_hiding
				trait = celibate 
			}
		}
		effect = {
			if = {
				limit = {
					trait = chaste
				}
				remove_trait = chaste
				add_trait = celibate
			}
			if = {
				limit = {
					NOR = {
						trait = lustful
						trait = hedonist
						trait = celibate
					}
				}
				add_trait = chaste
			}
			if = {
				limit = {
					OR = {
						trait = lustful
						trait = hedonist
					}
				}
				remove_trait = lustful
				remove_trait = hedonist
			}
			FROM = {
				piety = -25
			}
		}
		ai_will_do = {
			factor = 0.05 # 5% chance the ai chooses to do this if they ever have that chance
		}
	}
	#Hermione's Love Potion (chance the target may consume it and become the player's lover)
	dw_hermione_love_potion = {
		filter = all
		ai_target_filter = court
		from_potential = { # From is the person targeting the person to evoke the decision
			has_character_flag = dw_has_hermione_love_potion
		}
		potential = { # This is where we check the target to ensure they're valid
			NOT = { character = FROM } # We don't want to target ourselves by accident
			is_within_diplo_range = FROM # The target should be within the diplomatic range of the 'caster' for targeting purposes
			is_adult = yes # Don't want to create any odd results from giving it to a kid.
		}
		allow = {
			NOT = { # We want to ensure we can find them
				trait = in_hiding
			}
		}
		effect = {
			FROM = { clr_character_flag = dw_has_hermione_love_potion } # we remove it immediately so no one can target multiples before finishing the first event
			FROM = { narrative_event = { id = DWCourt.5261 } }
		}
		ai_will_do = {
			factor = 0.5 # 50% chance the ai chooses to do this if they ever have that chance
		}
	}
	# Werewolf Blood potion
	dw_werewolf_blood_potion_td = { # td = targeted decision - which was added to break a naming conflict with the character modifier.
		filter = all
		ai_target_filter = court
		from_potential = { # From is the person targeting the person to evoke the decision
			has_character_modifier = dw_werewolf_blood_potion
		}
		potential = { # This is where we check the target to ensure they're valid
			is_within_diplo_range = FROM # The target should be within the diplomatic range of the 'caster' for targeting purposes
		}
		allow = {
			NOT = { # We want to ensure we can find them
				trait = in_hiding
			}
			trait = werekin
		}
		effect = {
			FROM = { clr_character_flag = dw_werewolf_blood_potion } # we remove it immediately so no one can target multiples before finishing the first event
			remove_trait = werekin
			add_trait = werewolf
		}
		ai_will_do = {
			factor = 1.0 # 100% chance the ai chooses to do this if they ever have that chance
		}
	}
}