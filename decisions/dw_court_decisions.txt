## This file contains all decisions and targetted_decisions for the game
## Yes, targeted MUST be spelled wrong, as targeted_decisions isn't recognized by the game, yet targetted_decisions is.

# Decisions
# ROOT is the decision taker
decisions = {
	# Player decision to abdicate their throne to their heir.
	dw_resign_title = {
		potential = {
			ai = no
			current_heir = {
				dynasty = ROOT
			}
		}
		allow = {
			age = 40
			prisoner = no
			has_regent = no
			NOT = { trait = lunatic }
			NOT = { trait = possessed }
			current_heir = {
				has_regent = no
				NOT = { trait = incapable }
				age = 16
				NOT = { age = 40 }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }
				prisoner = no
			}
		}
		effect = {
			abdicate = yes
		}
		ai_will_do = {
			factor = 0 # Zero chance the ai uses this
		}
	}
	# Player decision to seek out a Court Jester
	dw_hire_jester = {
		potential = {
			ai = no
			NOT = { has_character_flag = dw_jester_shopping }
			OR = {
				is_feudal = yes
				is_tribal = yes
			}
			primary_title = {
				OR = {
					tier = king
					tier = emperor
				}
			}
		}
		allow = {
			prisoner = no
			has_regent = no
			NOT = {
				any_courtier = {
					has_minor_title = title_court_jester
				}
			}
		}
		effect = {
			set_character_flag = dw_jester_shopping
			narrative_event = { id = DWCourt.1000 }
		}
		ai_will_do = {
			factor = 0 # Zero chance the ai uses this
		}
	}
	# Alchemist / Emporium Shopping
	dw_go_shopping = { # Inspired by the old nadamod's visit_shop decision and events
		ai_check_interval = 36 # To keep things from getting out of hand, we only want the ai to go shopping once every three years
		potential = {
			OR = {
				has_valid_alchemist = yes
				has_valid_emporium = yes
			}
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
			wealth = 10
		}
		effect = {
			narrative_event = { id = DWCourt.100 }
		}
		ai_will_do = {
			factor = 0.5 # 50% likely to go shopping during their one annual check
			modifier = { # Half as likely to go
				factor = 0.5
				OR = {
					trait = timid # Doesn't like the crowds - just in case I open up shopping for kids, I'm putting this in here now
					trait = content # Happy with what they already have, not really looking for anything new
					trait = shy # Doesn't like the crowds
					trait = paranoid # Doesn't fully trust the wares that are being sold
				}
			}
		}
	}
	# Visit the stables
	dw_visit_stable = {
		potential = {
			ai = no # Player only decision
			has_global_flag = dw_stable_morale_visits # Has to be turned on via the random Marshall idea on_action event
			has_valid_stable = yes
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
		}
		effect = {
			narrative_event = { id = DWCourt.3110 }
		}
		ai_will_do = {
			factor = 0 # ai should not be doing this
		}
	}
	#Visit the Arena
	dw_visit_arena = {
		ai_check_interval = 6
		potential = {
			has_valid_arena = yes # Custom Script Trigger
		}
		allow = {
			is_adult = yes
			NOT = { trait = incapable }
			prisoner = no
		}
		effect = {
			narrative_event = { id = DWCourt.7000 }
		}
		ai_will_do = {
			factor = 0.1 # 10% base chance
			modifier = { # The very spiritual avoid the games in general, as they see it more as unnecessary pain and suffering.
				factor = 0
				ai_zeal = 50
			}
			modifier = { # The greedy are drawn to the arena, and the potential to win money
				factor = 5
				ai_greed = 50
			}
		}
	}
}
# Targetted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	rivals: your rivals plus any character you have an opinion modifier with 'crime = yes' set (the same set of characters the 'is_foe' trigger evaluates)
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#
targetted_decisions = {
	#Motivate Chancellor in their fabrication of claims
	dw_motivate_chancellor_claim = {
		filter = court
		ai_target_filter = self #We don't want the ai actually doing this, but we're reducing CPU impact just in case
		from_potential = {
			ai = no
		}
		potential = {
			has_job_title = job_chancellor # Ensure we select our Chancellor
			has_job_action = action_fabricate_claims # We should only be motivating them for the relevant task.
			liege = {
				ai = no #We make certain we can only motivate our own.
			}
		}
		allow = {
			always = yes
		}
		effect = {
			FROM = { character_event = { id = DWCourt.3000 } } # Event triggers for the liege
		}
		ai_will_do = {
			factor = 0
		}
	}
	#Enslave a prisoner
	dw_enslave_prisoner = {
		filter = court
		ai_target_filter = court
		ai_check_interval = 3
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			ai = yes # We're not going to enslave the player, as we're not detailing any of the slave side events
			prisoner = yes
			NOT = { has_character_modifier = dw_slave_training } # A slave who is already being trained is already a slave.
			NOT = { trait = branded_slave }
			host = {
				character = FROM
			}
		}
		allow = {
			age = 6 # Kids can be trained, although only in non-sexual jobs
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.1 days = 1 } # Target notified
			add_character_modifier = { name = dw_slave_training duration = -1 } # Character slotted for slave training
		}
		ai_will_do = {
			factor = 0.10 # 10% base chance
			modifier = {
				factor = 0
				FROM = {
					ai_honor = 20 #Honorable ai will opt not to enslave someone.
				}
			}
			modifier = {
				factor = 0
				FROM = {
					ai_zeal = 50 # Highly spiritual ai will opt not to enslave someone.
				}
			}
			modifier = {
				factor = 3 # makes it 30%
				FROM = {
					ai_greed = 20 # Greedy ai will be more likely to enslave someone.
				}
			}
		}
	}
	#Select an additional training category
	dw_select_slave_training = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			ai = yes
			prisoner = yes
			has_character_modifier = dw_slave_training
			NOT = { has_character_flag = dw_slave_training_in_progress }
			host = {
				character = FROM
			}
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.10 }
		}
		ai_will_do = {
			factor = 1 # If the ai has a slave that can be trained further, we want to go ahead and just do it.
		}
	}
	#Brand a slave
	dw_brand_slave = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			prisoner = yes
			host = {
				character = FROM
			}
			NOT = { trait = branded_slave }
			OR = {
				has_character_modifier = dw_slave_pleasure_complete
				has_character_modifier = dw_slave_warrior_complete
				has_character_modifier = dw_slave_skilled_complete
				has_character_modifier = dw_slave_common_complete
			}
		}
		effect = {
			character_event = { id = DWSlavery.700 }
		}
		ai_will_do = {
			factor = 1 # We don't want the ai collecting slaves, so they'll brand them when eligible.
		}
	}
	#Sell a slave
	dw_sell_slave = {
		filter = court
		ai_target_filter = court
		ai_check_interval = 6
		from_potential = {
			prisoner = no
			has_valid_slavery_location = yes
		}
		potential = {
			host = {
				character = FROM
			}
			trait = branded_slave
			slave_sale_health_check = yes
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.800 }
		}
		ai_will_do = {
			factor = 0.1 # 10% likely to sell a slave they have
			modifier = {
				factor = 0
				OR = {
					ai_honor = 20 #If they're very honorable, they more likely bought the slave to free than utilize.
					NOT = { ai_greed = -9 } #If they're not greedy, then they don't see a financial need to part with the slave
				}
			}
		}
	}
	#Keep a slave
	dw_keep_slave = {
		filter = court
		ai_target_filter = court
		from_potential = {
			prisoner = no
			capital_scope = {
				OR = {
					has_building = dw_slave_dungeon_1 # Castle
					has_building = dw_slave_dungeon_2
					has_building = dw_slave_dungeon_3
					has_building = dw_slave_wagon_1 # Nomad
					has_building = dw_slave_wagon_2
					has_building = dw_slave_wagon_3
					has_building = dw_slave_wagon_4
					has_building = dw_slave_wagon_5
					has_building = dw_slave_pen_1 # Tribal
					has_building = dw_slave_pen_2
					has_building = dw_slave_pen_3
				}
			}
		}
		potential = {
			prisoner = yes
			host = {
				character = FROM
			}
			trait = branded_slave
		}
		allow = {
			always = yes
		}
		effect = {
			character_event = { id = DWSlavery.900 }
		}
		ai_will_do = {
			factor = 0.2 # 20% base chance
		}
	}
	# Collect payment from working pleasure whore
	dw_collect_slave_whore_payment = {
		filter = court
		ai_target_filter = court
		from_potential = {
			is_ruler = yes # We don't need courtier's collecting from our whores
			prisoner = no # Can't collect from behind bars
			NOT = { trait = in_hiding } # If we're staying low, we don't interact with our whore slaves
		}
		potential = {
			liege = {
				character = FROM # ensure that a ruler is only pulling from their whore slaves
			}
			trait = branded_slave # We ensure that it's a slave we're collecting from
			trait = prostitute
		}
		effect = {
			transfer_scaled_wealth = {
				to = FROM # We're taking from the target and giving to the ruler
				value = all # Our whore slaves have no need of cash, so we're taking it all, hopefully.
			}
		}
	}
	#Turn target into a frog
	dw_spell_frog = {
		filter = all
		ai_target_filter = rivals # Hopefully to keep the ai from scoping and hitting a friendly
		from_potential = { # From is the person targeting the person to evoke the decision
			has_character_modifier = dw_spell_frog_target
		}
		potential = { # This is where we check the target to ensure they're valid
			NOT = { character = FROM } # We don't want to target ourselves by accident
			is_within_diplo_range = FROM # The target should be within the diplomatic range of the 'caster' for targeting purposes
		}
		allow = {
			NOT = { trait = in_hiding } # The target shouldn't be in hiding
		}
		effect = {
			# We remove the character modifier so it cannot be reused without cost
			FROM = { remove_character_modifier = dw_spell_frog_target }
			# We apply the curse effect
			add_trait = frog
			add_trait = portrait7
		}
		ai_will_do = {
			factor = 0.05 # 5% chance the ai chooses to do this if they ever have that chance
		}
	}
	# Attempt a kidnapping
	dw_kidnap = {
		filter = all
		ai_target_filter = realm
		from_potential = {
			ai = no # Player only
		}
		potential = {
			is_within_diplo_range = FROM # The target should be within reasonable travel range for the attempted abduction
			FROM = {
				wealth = 50
				any_courtier = {
					has_job_title = job_spymaster # We ensure that the player has a spymaster to execute the work
				}
			}
		}
		allow = {
			always = yes # For our testing purposes
		}
		effect = {
			FROM = { narrative_event = { id = DWCourt.3800 }}
		}
		ai_will_do = {
			factor = 0 # Not wanting the ai to do this at this time
		}
	}
}
